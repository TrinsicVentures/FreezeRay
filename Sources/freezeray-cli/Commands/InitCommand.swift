import ArgumentParser
import Foundation
import XcodeProj
import PathKit

struct InitCommand: ParsableCommand {
    static let configuration = CommandConfiguration(
        commandName: "init",
        abstract: "Initialize FreezeRay in your project (adds dependency and creates directory structure)"
    )

    @Option(name: .long, help: "Path to FreezeRay package (default: uses GitHub release)")
    var packagePath: String?

    @Flag(name: .long, help: "Skip adding FreezeRay dependency (directory structure only)")
    var skipDependency: Bool = false

    func run() throws {
        print("üîπ FreezeRay Init")
        print("")

        let workingDir = URL(fileURLWithPath: FileManager.default.currentDirectoryPath)

        // 1. Detect project type
        print("üîπ Detecting project type...")
        let projectType = try detectProjectType(in: workingDir)
        print("   Type: \(projectType.description)")
        print("")

        // 2. Create directory structure
        print("üîπ Creating directory structure...")
        try createDirectoryStructure(in: workingDir)
        print("   ‚úÖ Created FreezeRay/Fixtures/")
        print("   ‚úÖ Created FreezeRay/Tests/")
        print("")

        // 3. Add FreezeRay dependency (unless skipped)
        if !skipDependency {
            print("üîπ Adding FreezeRay dependency...")
            switch projectType {
            case .swiftPackage(let packagePath):
                try addDependencyToPackage(packagePath: packagePath)
                print("   ‚úÖ Added FreezeRay to Package.swift dependencies")

            case .xcodeProject(let projectPath):
                try addDependencyToXcodeProject(projectPath: projectPath, workingDir: workingDir)
                print("   ‚úÖ Added FreezeRay package to Xcode project")
                print("   ‚úÖ Added FreezeRay/ folder to project navigator")
            }
            print("")
        } else {
            print("   ‚ö†Ô∏è  Skipped adding dependency (--skip-dependency)")
            print("")
        }

        print("‚úÖ FreezeRay initialized successfully!")
        print("")
        print("üìù Next steps:")
        print("   1. Add @FreezeSchema(version: \"1.0.0\") to your schema")
        print("   2. Run: freezeray freeze 1.0.0")
        print("   3. Commit: git add FreezeRay/")
        print("")
        print("üìö Documentation: https://github.com/TrinsicVentures/FreezeRay")
    }
}

// MARK: - Project Type Detection

enum ProjectType {
    case swiftPackage(packagePath: String)
    case xcodeProject(projectPath: String)

    var description: String {
        switch self {
        case .swiftPackage: return "Swift Package"
        case .xcodeProject: return "Xcode Project"
        }
    }
}

func detectProjectType(in directory: URL) throws -> ProjectType {
    let fileManager = FileManager.default

    // Check for Package.swift
    let packageSwiftPath = directory.appendingPathComponent("Package.swift")
    if fileManager.fileExists(atPath: packageSwiftPath.path) {
        return .swiftPackage(packagePath: packageSwiftPath.path)
    }

    // Check for .xcodeproj
    let contents = try fileManager.contentsOfDirectory(at: directory, includingPropertiesForKeys: nil)
    for item in contents {
        if item.pathExtension == "xcodeproj" {
            return .xcodeProject(projectPath: item.path)
        }
    }

    throw InitError.noProjectFound
}

// MARK: - Directory Structure

func createDirectoryStructure(in directory: URL) throws {
    let fileManager = FileManager.default
    let freezeRayDir = directory.appendingPathComponent("FreezeRay")

    // Create FreezeRay/Fixtures/
    let fixturesDir = freezeRayDir.appendingPathComponent("Fixtures")
    try fileManager.createDirectory(at: fixturesDir, withIntermediateDirectories: true)

    // Create FreezeRay/Tests/
    let testsDir = freezeRayDir.appendingPathComponent("Tests")
    try fileManager.createDirectory(at: testsDir, withIntermediateDirectories: true)

    // Create README in FreezeRay/ directory
    let readmePath = freezeRayDir.appendingPathComponent("README.md")
    let readmeContent = """
    # FreezeRay

    This directory contains frozen schema fixtures and validation tests generated by FreezeRay.

    ## Directory Structure

    - `Fixtures/` - Immutable schema snapshots (committed to git)
    - `Tests/` - Scaffolded validation tests (committed to git)

    ## Usage

    1. Add `@FreezeSchema(version: "X.Y.Z")` to your schema
    2. Run `freezeray freeze X.Y.Z` to create fixtures
    3. Commit fixtures and tests to git
    4. Run tests with ‚åòU in Xcode

    ## Documentation

    https://github.com/TrinsicVentures/FreezeRay
    """
    try readmeContent.write(to: readmePath, atomically: true, encoding: .utf8)
}

// MARK: - SPM Package.swift Modification

func addDependencyToPackage(packagePath: String) throws {
    let packageURL = URL(fileURLWithPath: packagePath)
    var content = try String(contentsOf: packageURL, encoding: .utf8)

    // Check if FreezeRay is already added
    if content.contains("FreezeRay") {
        print("   ‚ö†Ô∏è  FreezeRay dependency already exists in Package.swift")
        return
    }

    // Add FreezeRay dependency to dependencies array
    let freezeRayDependency = """
        .package(url: "https://github.com/TrinsicVentures/FreezeRay.git", from: "0.4.0"),
    """

    // Find dependencies array and insert
    if let dependenciesRange = content.range(of: #"dependencies:\s*\["#, options: .regularExpression) {
        let insertionPoint = content.index(dependenciesRange.upperBound, offsetBy: 0)
        content.insert(contentsOf: "\n        " + freezeRayDependency, at: insertionPoint)
    } else {
        throw InitError.cannotModifyPackage(reason: "Could not find dependencies array")
    }

    // Write modified Package.swift
    try content.write(to: packageURL, atomically: true, encoding: .utf8)
}

// MARK: - Xcode Project Modification

func addDependencyToXcodeProject(projectPath: String, workingDir: URL) throws {
    let path = Path(projectPath)
    let xcodeproj = try XcodeProj(path: path)
    guard let project = xcodeproj.pbxproj.projects.first else {
        throw InitError.cannotModifyProject(reason: "No project found in .pbxproj")
    }

    // Find main app target (not test targets)
    guard let mainTarget = project.targets.first(where: { !$0.name.contains("Tests") }) else {
        throw InitError.cannotModifyProject(reason: "Could not find main app target")
    }

    // Check if FreezeRay package is already added to this target
    let hasFreezeRay = (mainTarget.packageProductDependencies ?? []).contains { dependency in
        dependency.productName == "FreezeRay"
    }

    if !hasFreezeRay {
        // Use XcodeProj's built-in method to add the package (handles all details correctly)
        _ = try project.addSwiftPackage(
            repositoryURL: "https://github.com/TrinsicVentures/FreezeRay.git",
            productName: "FreezeRay",
            versionRequirement: .upToNextMajorVersion("0.4.0"),
            targetName: mainTarget.name
        )
    }

    // Add FreezeRay/ folder as a folder reference (yellow folder in Xcode)
    if let mainGroup = project.mainGroup {
        // Check if FreezeRay folder reference already exists
        let existingFolder = mainGroup.children.first { element in
            element.name == "FreezeRay" || element.path == "FreezeRay"
        }

        if existingFolder == nil {
            // Create folder reference (not a group)
            let freezeRayFolder = PBXFileReference(
                sourceTree: .sourceRoot,
                lastKnownFileType: "folder",
                path: "FreezeRay"
            )
            xcodeproj.pbxproj.add(object: freezeRayFolder)
            mainGroup.children.append(freezeRayFolder)
        }
    }

    // Save modified project
    try xcodeproj.write(path: path)
}

// MARK: - Errors

enum InitError: Error, CustomStringConvertible {
    case noProjectFound
    case cannotModifyPackage(reason: String)
    case cannotModifyProject(reason: String)

    var description: String {
        switch self {
        case .noProjectFound:
            return """
            ‚ùå No Swift Package or Xcode project found in current directory

            Expected to find one of:
              - Package.swift (Swift Package)
              - *.xcodeproj (Xcode Project)

            Run this command from your project root directory.
            """
        case .cannotModifyPackage(let reason):
            return """
            ‚ùå Could not modify Package.swift: \(reason)

            You can manually add FreezeRay to your Package.swift:

            dependencies: [
                .package(url: "https://github.com/TrinsicVentures/FreezeRay.git", from: "0.4.0"),
            ]
            """
        case .cannotModifyProject(let reason):
            return """
            ‚ùå Could not modify Xcode project: \(reason)

            You can manually add FreezeRay in Xcode:
              1. File ‚Üí Add Package Dependencies...
              2. Enter: https://github.com/TrinsicVentures/FreezeRay.git
              3. Select version 0.4.0 or later
            """
        }
    }
}
